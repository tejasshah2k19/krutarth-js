90's 

website --> html --> css -->

static 

dynamic | interaction 


java script -->  frontend -> browser 

who ?? 

engine --> js engine --> execute js code 

ME   ---- chakra 
chroome ---- V8
FF ------ spider monkey




2009
c++ program --> V8 embed --> js  --> NodeJS--> backend --> server  


tools??
    text editor -> vs , sublime, notepad 
    browser --> FE 
    node ---> BE 



-------------------------------
1) internal js ---> html <script>
2) external js ---> .js --> html + js 

-------------------------------

js -- java 

-------------------------------
ES --> specification  var 
                        let const 
    ES1
    ES2
    ES3
    ES5 -> 2009* { XML , JSON*} 
    ES6 -> 2015* { let , const }
    ES2016 -> 2016   
    ES2017 -> 2017 

JS --> implmentation  var 
-------------------------------

        /*
             var let const 
             1) letters , digits , underscore and dollar sign 
             2) it must not start with digits   A1  $price _price , invalid -->  1A  
             3) case sensitive  |  t  T => both are different -> ans Ans 
             4) keywords ---reserved words --> var 


-------------------------------
Data Types: 
    number   
    string 
    objects 
    array 
    boolean 
    **undefined 
-------------------------------
parseInt()

-------------------------------
 HTML DOM --> using HTML DOM javascript can access and manipulate all the elements/tags of an html page.
 Document Object Model
 DOM Tree 

1) Core DOM
2) XML DOM
3) HTML DOM

mainly we have two things in dom ->  1) method 2) property 

getElementById ---> method 

we have three options to set/assing content to the html tag/element 
    p span div li ol 

property :-
1) innertText :- will not accept any extra space , will not accept any inner html tag  , we get only plain text  
2) innerHTML :- will get all spaces as well as inner html tag 
3) textContent :- Will accept all extra spaces but not accepting inner html tag 
-------------------------------------------------------


RegEx --> to verify input data with some patterns 

we can use wild card symbols in regex 

* => 0 or Many 
+ => 1 or Many  
? => 0 or 1 


. => exactly 1 [0-9a-zA-Zallspecial]


/  => start regex 

 / => end regex 

^ -> exactly pattern 
$ -> terminate 

/^[a-zA-Z]$/ ==> your input must have only single character - a-z OR A-Z 

/^[a-zA-Z]+$/ ==> your input must have atleat 1 character or many from =>  a-z OR A-Z 

XXX@XXX.XXX 

/^[a-zA-Z0-9]+@[a-zA-Z]+\.[a-zA-Z]{2,3}$/

{2,3} --> specify the size limit --> min is 2 and max 3 


/t/

password --> 1 0-9 
             1 A-Z
             1 a-z

             /^[a-zA-Z0-9]+$/ ==> your data must be in  { a-z A-Z 0-9  }  

            /[0-9]/
            /[a-z]/
            /[A-Z]/ 



---------------------------------------------

createElement()
appendChild()


createElement method is used to create any html element [ tag ]
appendChild method is used to create child element , in simple it will nest tag inside tag [ element inside element ]


let table = document.createElement("table")

let tr = document.createElement("tr")

let td1 = document.createElement("td")
td1.innertHTML  = "FirstName"

let td2 = document.createElement("td") 
td2.innertHTML  = "Email"

let td3 = document.createElement("td") 
td3.innertHTML  = "Password"

tr.appendChild(td1)
tr.appendChild(td2)
tr.appendChild(td3)

table.appendChild(tr)



--------------------------------
remove element from dom 

we use remove() of element 

let x = document.getElementById("id12")
x.remove()
--------------------------------

events :- 
    onBlur
    onclick
    onkeyup


--------------------------------
    

object 

    let user = {
        firstName:"tejas" 
    }
    user1 = {
        firstName : "ram",
        balance : 1233
    }

    user2 = {
        firstname : "laxman"
    }

    user.firstName
    user["firstName"]



class => logical == blueprint => properties ==> variable + methods 
object => physical => runtime ==> properties use 

Bank => class  { userName, password ,balance , login() , wid() , dep() , checkBal() }
Bank -> object => tejas { userName,password,balance,() } 
        object => krutarth { userName,password,balance,() } 
ES2015 or ES6 ==>

class User{
    constructor(){
        this.userName = ""
        this.password = "" 
        this.balance = 0 
    }
}


let user = new User(); 

//argument parameterized constructor

class User{
    constructor(n,p,bal){
        this.userName = n
        this.password = p 
        this.balance = bal
    }
}


let user = new User("tejas","shah",12000); 

------------------------------------------------------------------
ecom 

we have two types of users in ecom app. 
1)admin
2)buyer 

admin adds product for sell , buyer buy products 

both can access app via login. without login (public page) we have loging  and signup page in app. 

admin can,
        login
        create another admin 
        can add - list - update and remove products 
        can list order

buyer can,
        signup
        login 
        home page - after login buyer will redirect to home page. 

        home page = have list of all products and link or button for buy product 
        we dont have cart , when user click buy product , order is placed for that buyer. 
        also buyer can view all the orders that is placed by them. 
        buyer can not view each others order , they can view theirs orders only. 

------------------------------------------------------------------


























  





























